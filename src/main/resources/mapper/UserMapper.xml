<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.julong.oasystem.dao.UserDao">

    <resultMap id="userRoleMap" type="com.julong.oasystem.utils.model.One2Many">
        <id column="userId" property="userId"/>
        <result column="username" property="username"/>
        <result column="nickname" property="nickname"/>
        <result column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <result column="lastLoginTime" property="lastLoginTime"/>
        <result column="deleteStatus" property="deleteStatus"/>
        <collection property="permissionList" ofType="String">
            <id column="permissionName" property="permissionName"/>
        </collection>
    </resultMap>


    <resultMap id="userMap" type="com.julong.oasystem.utils.model.One2Many">
        <id column="userId" property="userId"/>
        <result column="username" property="username"/>
        <result column="nickname" property="nickname"/>
        <result column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <result column="lastLoginTime" property="lastLoginTime"/>
        <result column="deleteStatus" property="deleteStatus"/>
    </resultMap>

    <select id="countUser" resultType="Integer">
        SELECT count(0)
        FROM oa_user u
        WHERE u.delete_status = '1'
    </select>



    <select id="listUser" resultMap="userMap">
        SELECT
             U .*, r.role_name AS "roleName"
        FROM
                (
                    SELECT
                        ID AS "userId",
                        username AS "username",
                        nickname AS "nickname",
                        role_id AS "roleId",
                        delete_status AS "deleteStatus",
                        TO_CHAR( create_time,'yyyy-mm-dd hh24:mi:ss')  as "createTime",
                        TO_CHAR( update_time,'yyyy-mm-dd hh24:mi:ss')  as "updateTime"
                    FROM
                        oa_user
                    WHERE
                        delete_status = '1'
                    ORDER BY
                        ID
                ) U
        LEFT JOIN oa_role r ON r. ID = U ."roleId"
        ORDER BY  U ."userId"
    </select>


    <select id="listUserRole" resultMap="userRoleMap">
        SELECT
            u.*,
            r.role_name                as            "roleName",
            CONCAT(p.menu_name, p.permission_name) as  "permissionName"
        FROM (
                 SELECT
                     id                     as                 "userId",
                     username               as                  "username",
                     nickname               as                  "nickname",
                     role_id                as                  "roleId",
                     delete_status          as                  "deleteStatus",
                     create_time            as                  "createTime",
                     update_time            as                  "updateTime"
                 FROM oa_user
                 WHERE delete_status = '1'
                 ORDER BY id

             ) u
            LEFT JOIN oa_role r ON r.id = u."roleId"
            LEFT JOIN oa_role_permission rp ON rp.role_id = r.id
            LEFT JOIN oa_permission p ON p.id = rp.permission_id

        ORDER BY u."userId"
    </select>

    <select id="getAllRoles" resultType="com.alibaba.fastjson.JSONObject">
        SELECT
            id        as   "roleId",
            role_name as    "roleName"
        FROM oa_role
        WHERE delete_status='1'
    </select>

    <insert id="addUser" useGeneratedKeys="true" keyProperty="userId">

        <selectKey  keyProperty="id" resultType="int" order="BEFORE">
            select nvl(max(id),0)+1 from oa_user
        </selectKey>

        INSERT INTO oa_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
            password,
        </if>
            <if test="nickname != null">
                nickname,
            </if>
            <if test="roleId != null">
                role_id,
            </if>

            <if test="sex != null">
                sex,
            </if>

            <if test="age != null">
                age,
            </if>

            <if test="phone != null">
                tel,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="deptCode != null">
                deptCode,
            </if>

        </trim>

        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="nickname != null">
                #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=VARCHAR},
            </if>

            <if test="sex != null">
                #{sex,jdbcType=VARCHAR},
            </if>

            <if test="age != null">
                #{age,jdbcType=VARCHAR},
            </if>

            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="deptCode != null">
                #{deptCode,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <update id="updateUser">
        UPDATE oa_user
        SET
        nickname = #{nickname}
        <if test="password !='' and password !=null">
            , password = #{password}
        </if>

        , role_id = #{roleId}
        , delete_status = #{deleteStatus}
        WHERE id = #{userId} and id != 10001
    </update>
    <resultMap id="roleMap" type="com.julong.oasystem.utils.model.One2Many">
        <id column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
            <id column="userId" property="userId"/>
            <result column="nickname" property="nickname"/>
        </collection>
        <collection property="menus" ofType="com.julong.oasystem.utils.model.One2Many">
            <id column="menuCode" property="menuCode"/>
            <result column="menuName" property="menuName"/>
            <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
                <id column="permissionId" property="permissionId"/>
                <result column="permissionName" property="permissionName"/>
            </collection>
        </collection>
    </resultMap>

    <select id="listRole" resultMap="roleMap">
        SELECT
            r.id            as      "roleId",
            r.role_name     as      "roleName",
            u.id            as      "userId",
            u.nickname      as      "nickname",
            p.id            as      "permissionId",
            p.menu_code     as      "menuCode",
            p.menu_name     as      "menuName",
            p.permission_name as    "permissionName"
        FROM oa_role r
            LEFT JOIN oa_user u ON r.id = u.role_id AND u.delete_status = '1'
            LEFT JOIN oa_role_permission rp ON r.id = rp.role_id AND rp.delete_status = '1'
            LEFT JOIN oa_permission p ON rp.permission_id = p.id
        WHERE r.delete_status = '1'
        ORDER BY r.id, p.id
    </select>
    <resultMap id="permissionMap" type="com.julong.oasystem.utils.model.One2Many">
        <id column="menuName" property="menuName"/>
        <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
            <id column="id" property="id"/>
            <result column="permissionName" property="permissionName"/>
            <result column="requiredPerm" property="requiredPerm" javaType="Integer"/>
        </collection>
    </resultMap>

    <select id="listAllPermission" resultMap="permissionMap">
        SELECT
            p.id                 as     "id",
            p.menu_name          as     "menuName",
            p.permission_name    as     "permissionName",
            p.required_permission  as   "requiredPerm"
        FROM oa_permission p
    </select>

    <insert id="insertRole" useGeneratedKeys="true" keyProperty="roleId">



        INSERT INTO oa_role
        (id,role_name)
        VALUES (#{roleId},#{roleName})
    </insert>

    <insert id="insertRolePermission" parameterType="java.util.List" >

        insert into oa_role_permission (id,role_id, permission_id)

        select seq_permission_id.NEXTVAL, t.*

        from(
        <foreach close=")" collection="permissions" item="item" index="index" open="(" separator="union all">
            select
            #{roleId},
            #{item}
            from dual
        </foreach>
        ) t
    </insert>

    <resultMap id="aRole" type="com.julong.oasystem.utils.model.One2Many">
        <id column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
            <id column="userId" property="userId"/>
        </collection>
        <collection property="permissionIds" ofType="Integer">
            <id column="permissionId" property="permissionId"/>
        </collection>
    </resultMap>
    <select id="getRoleAllInfo" resultMap="aRole">
        SELECT
            r.id        as  "roleId",
            r.role_name as  "roleName",
            u.id        as  "userId",
            p.id        as  "permissionId"
        FROM oa_role r
            LEFT JOIN oa_user u ON r.id = u.role_id AND u.delete_status = '1'
            LEFT JOIN oa_role_permission rp ON r.id = rp.role_id AND rp.delete_status = '1'
            LEFT JOIN oa_permission p ON rp.permission_id = p.id
        WHERE r.id = #{roleId}
    </select>

    <update id="removeRole">
        UPDATE sys_role
        SET
            delete_status = '2'
        WHERE id = #{roleId} and id !=1
    </update>
    <update id="removeRoleAllPermission">
        UPDATE oa_role_permission
        SET
            delete_status = '2'
        WHERE role_id = #{roleId}
    </update>

    <update id="removeOldPermission">
        UPDATE oa_role_permission
        SET
        delete_status = '2'
        WHERE role_id = #{roleId}
        AND permission_id in (
        <foreach collection="permissions" item="item" index="index" separator=",">
            #{item}
        </foreach>
        )
    </update>
    <update id="updateRoleName">
        UPDATE oa_role
        SET
            role_name = #{roleName}
        WHERE id = #{roleId}
    </update>
    <select id="queryExistUsername" resultType="java.lang.Integer">
        select count(0)
         from oa_user
         WHERE username=#{username}
         AND delete_status='1'
    </select>

    <select id="selectAdmin" resultType="com.alibaba.fastjson.JSONObject">
        select
        username as "username",
        nickname as "nickname"
         from oa_user
         WHERE role_Id='1'
         AND delete_status='1'
    </select>
</mapper>